'use strict';

var iframeStyles = function iframeStyles() {
    return 'position: fixed;top: 0;width: 410px;padding:5px;height: 1110px;left: 50%;transform: translate(-50%);background-color:#f0f5ea;box-shadow:0 0 1px rgba(94,164,0,.9);font-size:13px;border:1px solid #EFEFEF;display: none';
};

var generateInjector = function generateInjector(_ref) {
    var fileName = _ref.fileName;
    return '\nconst appUpdateDoc ="<div id=\'update-txt\'><div>Application has been updated. Click the button below to get the latest version.</div><button id=\'update-app\'>Update App</button></div>";\nconst stateChangeHandler = (reg, newWorker, ifrm) => () => {\n    if (navigator.serviceWorker.controller && reg.waiting && newWorker.state === \'installed\') {\n        const awaitingSW = reg.waiting;\n        const appUpdateFrame = document.getElementById(\'app-update-frame\');\n        const updateText= appUpdateFrame\n            .contentWindow\n            .document\n            .getElementById(\'update-txt\');\n        const updateApp = appUpdateFrame\n            .contentWindow\n            .document\n            .getElementById(\'update-app\');\n        ifrm.style.display = \'block\';\n        updateText.style.color = \'#4b583a\';\n        updateText.style.cursor = \'pointer\';\n        updateApp.style.color = \'#fff\';\n        updateApp.style.backgroundColor = \'#4caf50\';\n        updateApp.style.marginTop = \'10px\';\n        updateApp.style.padding = \'8px\';\n        updateApp.style.borderRadius = \'3px\';\n        updateApp.style.outline = "none";\n        updateApp.style.cursor = \'pointer\';\n        updateApp.addEventListener(\'click\', () => {\n            awaitingSW.postMessage({\n                type: \'SKIP-WAITING\',\n            });\n        });\n    }\n};\n\nconst messageHandler = (event) => {\n    if (event.data === \'RELOAD\') {\n        location.reload();\n    }\n};\n\nconst updateHandler = (reg, ifrm) => () => {\n    const newWorker = reg.installing;\n    newWorker.addEventListener(\'statechange\', stateChangeHandler(reg, newWorker, ifrm));\n};\n\nif (\'serviceWorker\' in navigator) {\n    navigator.serviceWorker.register(\'./' + fileName + '\')\n        .then((reg) => {\n            const ifrm = document.createElement(\'iframe\');\n            ifrm.setAttribute(\'id\', \'app-update-frame\');\n            ifrm.setAttribute(\'srcdoc\', appUpdateDoc);\n            ifrm.setAttribute(\'style\', \'' + iframeStyles() + '\');\n            document.body.appendChild(ifrm);\n            reg.addEventListener(\'updatefound\', updateHandler(reg, ifrm));\n            navigator.serviceWorker.addEventListener(\'message\', messageHandler);\n        }, (err) => {\n            throw new Error(\'Service worker registration failed: \', err);\n        });\n}';
};

module.exports = {
    generateInjector: generateInjector
};